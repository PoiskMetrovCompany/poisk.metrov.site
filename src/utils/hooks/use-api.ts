import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query"
import axios from "axios"

// –ë–∞–∑–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || "/api",
  timeout: 30000,
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.request.use((config) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
  const cookies = document.cookie.split(";")
  const tokenCookie = cookies.find((cookie) =>
    cookie.trim().startsWith("access_token=")
  )

  if (tokenCookie) {
    const token = tokenCookie.split("=")[1]
    // config.headers.Authentication = `Bearer ${token}`
    config.headers.Authorization = `Bearer ${token}`
  }

  return config
})

// –í–Ω–µ—à–Ω–∏–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º
const externalApi = axios.create({
  timeout: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
})

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface ApiResponse<T> {
  data: T
  success: boolean
  message?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ URL
function isExternalUrl(url: string): boolean {
  return url.startsWith("http://") || url.startsWith("https://")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞
function getApiClient(url: string) {
  return isExternalUrl(url) ? externalApi : api
}

// –£–∑–∫–∏–π type-guard –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ { data: ... }
function hasDataKey(value: unknown): value is { data: unknown } {
  return typeof value === "object" && value !== null && "data" in value
}

// –•—É–∫ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
export function useApiQuery<T>(
  key: string[],
  url: string,
  options?: {
    enabled?: boolean
    staleTime?: number
    gcTime?: number
    retry?: number
    retryDelay?: number
    useMock?: boolean
    mockFn?: () => Promise<T>
    refetchOnMount?: boolean
    refetchOnWindowFocus?: boolean
    refetchOnReconnect?: boolean
    refetchInterval?: number
    refetchIntervalInBackground?: boolean
    timeout?: number
  }
) {
  return useQuery({
    queryKey: key,
    queryFn: async (): Promise<T | null> => {
      try {
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –º–æ–∫-—Ä–µ–∂–∏–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è
        if (options?.useMock && options?.mockFn) {
          return await options.mockFn()
        }

        const client = getApiClient(url)

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        const config = options?.timeout ? { timeout: options.timeout } : {}
        const response = await client.get<unknown>(url, config)
        const payload: unknown = response.data

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º
        if (key.includes("vacancies")) {
          console.log("üåê API Query –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π:", {
            url,
            isExternal: isExternalUrl(url),
            responseStatus: response.status,
            payloadType: typeof payload,
            payloadKeys:
              payload && typeof payload === "object"
                ? Object.keys(payload as object)
                : "not object",
            payload,
          })
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–∏–π API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é (–∏–ª–∏ null, –Ω–æ –Ω–µ undefined)
        if (isExternalUrl(url)) {
          const result = (payload ?? null) as T | null
          if (key.includes("vacancies")) {
            console.log("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API:", result)
          }
          return result
        }

        // –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if (response.status === 204) {
          return null
        }

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ { data: ... }
        if (hasDataKey(payload)) {
          const result = ((payload.data as unknown) ?? null) as T | null
          if (key.includes("vacancies")) {
            console.log("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ payload.data:", result)
          }
          return result
        }

        // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º payload –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ null (—á—Ç–æ–±—ã –Ω–µ –≤–µ—Ä–Ω—É—Ç—å undefined)
        const result = (payload ?? null) as T | null
        if (key.includes("vacancies")) {
          console.log("üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º payload –∫–∞–∫ –µ—Å—Ç—å:", result)
        }
        return result
      } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –≤ useApiQuery:", error)
        return null
      }
    },
    enabled: options?.enabled ?? true,
    staleTime: options?.staleTime,
    gcTime: options?.gcTime,
    retry: options?.retry ?? 2,
    retryDelay: options?.retryDelay ?? 1000,
    refetchOnMount: options?.refetchOnMount ?? true,
    refetchOnWindowFocus: options?.refetchOnWindowFocus ?? true,
    refetchOnReconnect: options?.refetchOnReconnect ?? true,
    refetchInterval: options?.refetchInterval,
    refetchIntervalInBackground: options?.refetchIntervalInBackground ?? false,
  })
}

// –•—É–∫ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
export function useApiMutation<T, V>(
  url: string,
  options?: {
    onSuccess?: (data: T) => void
    onError?: (error: Error) => void
    invalidateQueries?: string[] | false // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    timeout?: number
  }
) {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: async (variables: V): Promise<T> => {
      try {
        const client = getApiClient(url)

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        const config = options?.timeout ? { timeout: options.timeout } : {}
        const response = await client.post<unknown>(url, variables, config)
        const payload: unknown = response.data

        if (isExternalUrl(url)) {
          return payload as T
        }

        if (hasDataKey(payload)) {
          return payload.data as T
        }

        return payload as T
      } catch (_error) {
        console.error("API Mutation Error:", _error)
        throw _error as Error
      }
    },
    onSuccess: (data) => {
      options?.onSuccess?.(data)

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
      if (options?.invalidateQueries === false) {
        // –ù–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∏—á–µ–≥–æ
        return
      } else if (
        options?.invalidateQueries &&
        Array.isArray(options.invalidateQueries)
      ) {
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        options.invalidateQueries.forEach((queryKey) => {
          queryClient.invalidateQueries({ queryKey: [queryKey] })
        })
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        queryClient.invalidateQueries()
      }
    },
    onError: (error) => {
      options?.onError?.(error)
    },
  })
}

// –•—É–∫ –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–æ–≤
export function useApiUpdate<T, V>(
  url: string,
  options?: {
    onSuccess?: (data: T) => void
    onError?: (error: Error) => void
    invalidateQueries?: string[] | false
    timeout?: number
  }
) {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: async (variables: V): Promise<T> => {
      try {
        const client = getApiClient(url)

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        const config = options?.timeout ? { timeout: options.timeout } : {}
        const response = await client.put<unknown>(url, variables, config)
        const payload: unknown = response.data

        if (isExternalUrl(url)) {
          return payload as T
        }

        if (hasDataKey(payload)) {
          return payload.data as T
        }

        return payload as T
      } catch (_error) {
        console.error("API Update Error:", _error)
        throw _error as Error
      }
    },
    onSuccess: (data) => {
      options?.onSuccess?.(data)

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
      if (options?.invalidateQueries === false) {
        return
      } else if (
        options?.invalidateQueries &&
        Array.isArray(options.invalidateQueries)
      ) {
        options.invalidateQueries.forEach((queryKey) => {
          queryClient.invalidateQueries({ queryKey: [queryKey] })
        })
      } else {
        queryClient.invalidateQueries()
      }
    },
    onError: (error) => {
      options?.onError?.(error)
    },
  })
}

export function useApiDelete<T, V = void>(
  url: string,
  options?: {
    onSuccess?: (data: T) => void
    onError?: (error: Error) => void
    invalidateQueries?: string[] | false
    timeout?: number
  }
) {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: async (variables: V): Promise<T> => {
      try {
        const client = getApiClient(url)

        let requestUrl = url
        if (variables && typeof variables === "object") {
          const params = new URLSearchParams()
          Object.entries(variables as Record<string, unknown>).forEach(
            ([key, value]) => {
              if (value !== undefined && value !== null) {
                params.append(key, String(value))
              }
            }
          )
          if (params.toString()) {
            requestUrl += (url.includes("?") ? "&" : "?") + params.toString()
          }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        const config = options?.timeout ? { timeout: options.timeout } : {}
        const response = await client.delete<unknown>(requestUrl, config)
        const payload: unknown = response.data

        if (isExternalUrl(url)) {
          return payload as T
        }

        if (hasDataKey(payload)) {
          return payload.data as T
        }

        return payload as T
      } catch (_error) {
        console.error("API Delete Error:", _error)
        throw _error as Error
      }
    },
    onSuccess: (data) => {
      options?.onSuccess?.(data)

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
      if (options?.invalidateQueries === false) {
        return
      } else if (
        options?.invalidateQueries &&
        Array.isArray(options.invalidateQueries)
      ) {
        options.invalidateQueries.forEach((queryKey) => {
          queryClient.invalidateQueries({ queryKey: [queryKey] })
        })
      } else {
        queryClient.invalidateQueries()
      }
    },
    onError: (error) => {
      options?.onError?.(error)
    },
  })
}

export { api, externalApi }
