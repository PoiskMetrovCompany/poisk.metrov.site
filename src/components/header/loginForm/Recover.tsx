import clsx from "clsx"

import React, { useState } from "react"

// import { useAuthPhone } from "@/hooks/useAuth"
// import { useAuthPincode } from "@/hooks/useAuth"
// import { setAuthToken } from "@/utils/auth"

import styles from "./form.module.scss"

import IconImage from "@/components/ui/IconImage"
import ActionButton from "@/components/ui/buttons/ActionButton"

interface RecoverProps {
  onAuthSuccess?: () => void
}

const Recover: React.FC<RecoverProps> = ({ onAuthSuccess }) => {
  const [login, setLogin] = useState("")
  const [password, setPassword] = useState("")
  const [isLoginValid, setIsLoginValid] = useState(false)
  const [isPasswordValid, setIsPasswordValid] = useState(false)
  const [isAgreed, setIsAgreed] = useState(false)
  const [showPassword, setShowPassword] = useState(false)

  const [isVerifiedPassword, setIsVerifiedPassword] = useState(true)
  const [isVerifiedLogin, setIsVerifiedLogin] = useState(true)

  // –•—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã)
  // const authPhoneMutation = useAuthPhone()
  // const authPincodeMutation = useAuthPincode()

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setPassword(value)
    setIsPasswordValid(value.length >= 6) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
  const handleTogglePasswordVisibility = () => {
    setShowPassword(!showPassword)
  }

  const handleLoginChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value
    setLogin(inputValue)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    const isEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(inputValue)
    const phoneNumbers = inputValue.replace(/\D/g, "")
    const isPhone =
      phoneNumbers.length === 11 &&
      (phoneNumbers.startsWith("7") || phoneNumbers.startsWith("8"))

    setIsLoginValid(isEmail || isPhone)
  }

  const handleLoginFocus = () => {
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ +7, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å email
  }

  const handleLoginSubmit = () => {
    setIsVerifiedLogin(false)
    setIsVerifiedPassword(false)

    if (isLoginValid && password.length >= 6 && isAgreed) {
      // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log("üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", {
        login,
        password,
      })

      // authPhoneMutation.mutate(
      //   { login, password },
      //   {
      //     onSuccess: (data) => {
      //       console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", data)
      //       // const token = data.attributes.token.access_token
      //       // setAuthToken(token)
      //       if (onAuthSuccess) {
      //         onAuthSuccess()
      //       }
      //     },
      //     onError: (error) => {
      //       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error)
      //     },
      //   }
      // )

      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (onAuthSuccess) {
        onAuthSuccess()
      }
    }
  }

  return (
    <div className={styles.loginForm__form}>
      {/* –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ */}
      <div className={styles.loginForm__input_container}>
        <div
          className={clsx(
            styles.loginForm__input_label,
            !isVerifiedLogin && styles.loginForm__input_label_error
          )}
        >
          <label
            className={clsx(
              styles.loginForm__label,
              !isVerifiedLogin && styles.loginForm__label_error
            )}
          >
            E-mail
          </label>
        </div>
        <div className={styles.loginForm__input_wrapper}>
          <input
            type="text"
            value={login}
            onChange={handleLoginChange}
            onFocus={handleLoginFocus}
            className={clsx(
              styles.loginForm__input,
              !isVerifiedLogin && styles.loginForm__input_error
            )}
            placeholder="–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"
          />
          {isLoginValid && (
            <IconImage
              className={styles.loginForm__input_wrapper_icon}
              iconLink="/images/icons/ok-orange.svg"
              alt="–í–∞–ª–∏–¥–Ω—ã–π –ª–æ–≥–∏–Ω"
            />
          )}
        </div>
        {!isVerifiedLogin && (
          <span className={styles.loginForm__input_wrapper_error}>
            –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º e-mail –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          </span>
        )}
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è —Ñ–æ—Ä–º—ã */}
      <div className={styles.loginForm__form_actions}>
        {/* –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
        <ActionButton
          type={isLoginValid ? "primary" : "disabled-filled"}
          className={styles.loginForm__submit_button}
          onClick={handleLoginSubmit}
        >
          –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
        </ActionButton>
      </div>

      {/* –°–æ–≥–ª–∞—Å–∏–µ */}
      <div className={styles.loginForm__agreement}>
        <label className={styles.loginForm__checkbox_container}>
          <input
            type="checkbox"
            checked={isAgreed}
            onChange={(e) => setIsAgreed(e.target.checked)}
            className={styles.loginForm__checkbox}
          />
          <span className={styles.loginForm__checkbox_mark}></span>
          <span className={styles.loginForm__agreement_text}>
            –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏{" "}
            <b>–ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>
          </span>
        </label>
        <label className={styles.loginForm__checkbox_container}>
          <input
            type="checkbox"
            checked={isAgreed}
            onChange={(e) => setIsAgreed(e.target.checked)}
            className={styles.loginForm__checkbox}
          />
          <span className={styles.loginForm__checkbox_mark}></span>
          <span className={styles.loginForm__agreement_text}>
            –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º <b>—Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ </b>
          </span>
        </label>
      </div>
    </div>
  )
}

export default Recover
