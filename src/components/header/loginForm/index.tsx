"use client"

import * as Dialog from "@radix-ui/react-dialog"
import { VisuallyHidden } from "@radix-ui/react-visually-hidden"
import clsx from "clsx"

import React, { useCallback, useEffect, useState } from "react"

import { useAuthPhone, useAuthPincode } from "@/hooks/useAuth"
import { useAuthStore } from "@/stores/useAuthStore"
import { CurrentUserResponse } from "@/types/User"
import { getAuthToken, setAuthToken } from "@/utils/auth"
import { formatPhoneNumber } from "@/utils/formatPhoneNumber"
import { useApiQuery } from "@/utils/hooks/use-api"

import styles from "./form.module.scss"

import IconImage from "@/components/ui/IconImage"
import ActionButton from "@/components/ui/buttons/ActionButton"

interface LoginFormProps {
  isOpen?: boolean
  onClose?: () => void
  trigger?: React.ReactNode
}

const LoginForm: React.FC<LoginFormProps> = ({
  isOpen = false,
  onClose,
  trigger,
}) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Zustand state –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π
  const { isLoginFormOpen, closeLoginForm } = useAuthStore()
  const [open, setOpen] = useState(isOpen)
  const [phone, setPhone] = useState("")
  const [isAgreed, setIsAgreed] = useState(false)
  const [code, setCode] = useState("")
  const [step, setStep] = useState<"phone" | "code">("phone")
  const [timer, setTimer] = useState(60)
  const [isTimerActive, setIsTimerActive] = useState(false)

  // –•—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authPhoneMutation = useAuthPhone()
  const authPincodeMutation = useAuthPincode()

  // Zustand store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  const { login } = useAuthStore()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [authSuccess, setAuthSuccess] = useState(false)

  // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { data: currentUserData } = useApiQuery<CurrentUserResponse>(
    ["currentUser"],
    "api/proxy/users/get-current",
    {
      enabled: authSuccess, // –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      staleTime: 5 * 60 * 1000,
      gcTime: 10 * 60 * 1000,
    }
  )

  // –¢–∞–π–º–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å"
  useEffect(() => {
    let interval: NodeJS.Timeout

    if (isTimerActive && timer > 0) {
      interval = setInterval(() => {
        setTimer((prev) => prev - 1)
      }, 1000)
    } else if (timer === 0) {
      setIsTimerActive(false)
    }

    return () => {
      if (interval) {
        clearInterval(interval)
      }
    }
  }, [isTimerActive, timer])

  const handleOpenChange = useCallback(
    (newOpen: boolean) => {
      setOpen(newOpen)
      if (!newOpen) {
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        setStep("phone")
        setPhone("")
        setCode("")
        setIsTimerActive(false)
        setTimer(60)
        setAuthSuccess(false)
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ Zustand
        closeLoginForm()
        if (onClose) {
          onClose()
        }
      }
    },
    [onClose, closeLoginForm]
  )

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (currentUserData?.attributes) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const token = getAuthToken()
      if (token) {
        login(token, currentUserData.attributes)
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        handleOpenChange(false)
      }
    }
  }, [currentUserData, login, handleOpenChange])

  const isPhoneValid = phone.replace(/\D/g, "").length >= 10
  const canSubmit = isPhoneValid && isAgreed

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value
    const formattedValue = formatPhoneNumber(inputValue)
    setPhone(formattedValue)
  }

  const formatPhoneDisplay = (value: string) => {
    if (!value) return "+7"
    return value
  }

  const handlePhoneSubmit = () => {
    if (phone.length >= 10) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      authPhoneMutation.mutate(
        { phone },
        {
          onSuccess: () => {
            setStep("code")
            setIsTimerActive(true)
            setTimer(60)
          },
          onError: (error) => {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error)
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          },
        }
      )
    }
  }

  const handleCodeSubmit = () => {
    if (code.length === 4) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pincode –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log("üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", {
        phone,
        pincode: code,
      })
      authPincodeMutation.mutate(
        { phone, pincode: code },
        {
          onSuccess: (data) => {
            console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", data)
            console.log("Access Token:", data.attributes.token.access_token)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookies
            const token = data.attributes.token.access_token
            setAuthToken(token)

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setAuthSuccess(true)
          },
          onError: (error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error)
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          },
        }
      )
    }
  }

  const handleResendCall = () => {
    if (timer === 0) {
      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      authPhoneMutation.mutate(
        { phone },
        {
          onSuccess: () => {
            setIsTimerActive(true)
            setTimer(60)
            console.log("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
          },
          onError: (error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–≤–æ–Ω–∫–µ:", error)
          },
        }
      )
    }
  }

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`
  }

  const triggerElement = trigger || (
    <ActionButton type="primary">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</ActionButton>
  )

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Zustand state –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
  const isFormOpen = isLoginFormOpen || open

  return (
    <Dialog.Root open={isFormOpen} onOpenChange={handleOpenChange}>
      <Dialog.Trigger asChild>{triggerElement}</Dialog.Trigger>
      <Dialog.Portal>
        <Dialog.Overlay className={styles.loginForm__overlay} />
        <Dialog.Content className={styles.loginForm__content}>
          <Dialog.Title asChild>
            <VisuallyHidden>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</VisuallyHidden>
          </Dialog.Title>
          <Dialog.Description asChild>
            <VisuallyHidden>
              –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            </VisuallyHidden>
          </Dialog.Description>

          <div className={styles.loginForm__dialog}>
            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
            <button
              onClick={() => handleOpenChange(false)}
              className={styles.loginForm__close_button}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              <IconImage
                iconLink="/images/icons/close.svg"
                alt="–ó–∞–∫—Ä—ã—Ç—å"
                className={styles.loginForm__close_icon}
              />
            </button>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º—ã */}
            <div className={styles.loginForm__form_content}>
              {step === "phone" ? (
                <>
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                  <div className={styles.loginForm__header}>
                    <h2 className={styles.loginForm__title}>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
                    <div className={styles.loginForm__description}>
                      <p className={styles.loginForm__description_text}>
                        –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º
                        –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.
                      </p>
                      <p className={styles.loginForm__description_text}>
                        –£ –Ω–∞—Å –Ω–µ—Ç –ø–∞—Ä–æ–ª–µ–π - –≤—Ö–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –Ω–æ–º–µ—Ä—É
                        —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–≤–æ–Ω–∏–º.
                      </p>
                    </div>
                  </div>

                  {/* –§–æ—Ä–º–∞ */}
                  <div className={styles.loginForm__form}>
                    {/* –ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
                    <div className={styles.loginForm__input_container}>
                      <div className={styles.loginForm__input_label}>
                        <label className={styles.loginForm__label}>
                          –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω
                        </label>
                      </div>
                      <div className={styles.loginForm__input_wrapper}>
                        <input
                          type="text"
                          value={formatPhoneDisplay(phone)}
                          onChange={handlePhoneChange}
                          className={styles.loginForm__input}
                          placeholder="+7"
                          maxLength={18}
                        />
                      </div>
                    </div>

                    {/* –î–µ–π—Å—Ç–≤–∏—è —Ñ–æ—Ä–º—ã */}
                    <div className={styles.loginForm__form_actions}>
                      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                      <ActionButton
                        type={canSubmit ? "primary" : "disabled"}
                        className={styles.loginForm__submit_button}
                        disabled={!canSubmit || authPhoneMutation.isPending}
                        onClick={handlePhoneSubmit}
                      >
                        {authPhoneMutation.isPending
                          ? "–û—Ç–ø—Ä–∞–≤–∫–∞..."
                          : "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"}
                      </ActionButton>

                      {/* –°–æ–≥–ª–∞—Å–∏–µ */}
                      <div className={styles.loginForm__agreement}>
                        <label className={styles.loginForm__checkbox_container}>
                          <input
                            type="checkbox"
                            checked={isAgreed}
                            onChange={(e) => setIsAgreed(e.target.checked)}
                            className={styles.loginForm__checkbox}
                          />
                          <span
                            className={styles.loginForm__checkbox_mark}
                          ></span>
                          <span className={styles.loginForm__agreement_text}>
                            –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É{" "}
                            <b> —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö </b>
                          </span>
                        </label>
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ */}
                  <div className={styles.loginForm__header}>
                    <h2 className={styles.loginForm__title}>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
                    <div className={styles.loginForm__description}>
                      <p className={styles.loginForm__description_text}>
                        –í–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä
                        <br />
                        {phone}
                        <br />
                        –û—Ç–≤–µ—á–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
                      </p>
                    </div>
                  </div>

                  {/* –§–æ—Ä–º–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ */}
                  <div className={styles.loginForm__form}>
                    {/* –ü–æ–ª–µ –∫–æ–¥–∞ */}
                    <div className={styles.loginForm__input_container}>
                      <div className={styles.loginForm__input_label}>
                        <label className={styles.loginForm__label}>
                          –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞
                        </label>
                      </div>
                      <div className={styles.loginForm__input_wrapper}>
                        <input
                          type="text"
                          value={code}
                          onChange={(e) =>
                            setCode(e.target.value.replace(/\D/g, ""))
                          }
                          className={clsx(
                            styles.loginForm__input,
                            styles.loginForm__input_code
                          )}
                          placeholder=""
                          maxLength={4}
                        />
                      </div>
                    </div>

                    {/* –î–µ–π—Å—Ç–≤–∏—è —Ñ–æ—Ä–º—ã */}
                    <div className={styles.loginForm__form_actions}>
                      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                      <ActionButton
                        type={code.length === 4 ? "primary" : "disabled"}
                        className={styles.loginForm__submit_button}
                        disabled={
                          code.length < 4 || authPincodeMutation.isPending
                        }
                        onClick={handleCodeSubmit}
                      >
                        {authPincodeMutation.isPending
                          ? "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è..."
                          : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                      </ActionButton>

                      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å */}
                      <button
                        onClick={handleResendCall}
                        disabled={timer > 0}
                        className={clsx(
                          styles.loginForm__resend_button,
                          timer === 0 && styles.loginForm__resend_button_active
                        )}
                      >
                        {timer > 0
                          ? `–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(timer)}`
                          : "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å"}
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  )
}

export default LoginForm
