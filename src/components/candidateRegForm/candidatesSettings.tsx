"use client"

import { useMutation, useQueryClient } from "@tanstack/react-query"

import React, { FC, KeyboardEvent, useEffect, useState } from "react"

import Image from "next/image"

import { useApiMutation, useApiQuery } from "@/utils/hooks/use-api"

import AccessTable from "./accessTable/AccessTable"
import ConfirmationModal from "./confirmationalWindow"

interface IRole {
  id: string
  key: string
  title: string
}

const CandidatesSettings: FC = () => {
  const queryClient = useQueryClient()

  // –ó–∞–ø—Ä–æ—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React Query
  const {
    data: rolesData,
    isLoading: isLoadingRoles,
    error: rolesError,
    refetch,
  } = useApiQuery<{
    response: boolean
    attributes: IRole[]
  }>(["vacancies"], `${process.env.NEXT_PUBLIC_API_URL}/vacancy/`, {
    staleTime: 30 * 60 * 1000, 
    gcTime: 60 * 60 * 1000,
    retry: 2,
    refetchOnMount: false, 
    refetchOnWindowFocus: false, 
    refetchOnReconnect: false, 
  })


  const roles = rolesData?.attributes || []

  
  const createRoleMutation = useApiMutation<
    { id: string; key: string; title: string },
    { title: string }
  >(`${process.env.NEXT_PUBLIC_API_URL}/vacancy/store`, {
    onSuccess: (data) => {
      console.log("‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", data)
      queryClient.invalidateQueries({ queryKey: ["vacancies"] })
    },
    onError: (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏:", error)
      queryClient.invalidateQueries({ queryKey: ["vacancies"] })
    },
  })

  const updateRoleMutation = useApiMutation<
    { id: string; key: string; title: string },
    { key: string; title: string }
  >(`${process.env.NEXT_PUBLIC_API_URL}/vacancy/update`, {
    onSuccess: (data) => {
      console.log("‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", data)
      queryClient.invalidateQueries({ queryKey: ["vacancies"] })
    },
    onError: (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:", error)
      queryClient.invalidateQueries({ queryKey: ["vacancies"] })
    },
  })

  const deleteRoleMutation = useApiMutation<
    { success: boolean },
    { key: string }
  >(`${process.env.NEXT_PUBLIC_API_URL}/vacancy/destroy`, {
    onSuccess: (data) => {
      console.log("‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:", data)
      queryClient.invalidateQueries({ queryKey: ["vacancies"] })
    },
    onError: (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:", error)
      queryClient.invalidateQueries({ queryKey: ["vacancies"] })
    },
  })

  useEffect(() => {
    console.log("üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π:", {
      count: roles.length,
      isLoading: isLoadingRoles,
      hasError: !!rolesError,
      roles: roles.map((r) => ({ id: r.id, title: r.title, key: r.key })),
    })
  }, [roles, isLoadingRoles, rolesError])

  const [isAdding, setIsAdding] = useState<boolean>(false)
  const [isEditing, setIsEditing] = useState<boolean>(false)
  const [newRole, setNewRole] = useState<string>("")
  const [editingIndex, setEditingIndex] = useState<number | null>(null)
  const [editingRole, setEditingRole] = useState<string>("")

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false)
  const [roleToDelete, setRoleToDelete] = useState<number | null>(null)

  const handleAddRole = () => {
    console.log("=== –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–ò–¢–¨ –†–û–õ–¨ ===")
    console.log("–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    console.log("- editingIndex:", editingIndex)
    console.log("- isAdding:", isAdding)
    console.log("- newRole:", newRole)
    console.log("- editingRole:", editingRole)

    if (editingIndex !== null) {
      console.log("‚Üí –†–µ–∂–∏–º: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø")
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–æ–ª—å
      saveEditedRole()
    } else if (isAdding) {
      console.log("‚Üí –†–µ–∂–∏–º: –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–í–û–ô –†–û–õ–ò")
      console.log("‚Üí –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω–ø—É—Ç–µ:", `"${newRole}"`)
      console.log("‚Üí –ü–æ—Å–ª–µ trim():", `"${newRole.trim()}"`)
      console.log(
        "‚Üí –£—Å–ª–æ–≤–∏–µ newRole.trim():",
        newRole.trim() ? "TRUE" : "FALSE"
      )
      // –í—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
      if (newRole.trim()) {
        console.log("‚Üí –í–´–ó–´–í–ê–ï–ú saveNewRole()")
        saveNewRole()
      } else {
        console.log("‚Üí –ù–ï –≤—ã–∑—ã–≤–∞–µ–º saveNewRole() - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
      }
    } else {
      console.log("‚Üí –†–µ–∂–∏–º: –ü–û–ö–ê–ó–ê–¢–¨ –ò–ù–ü–£–¢ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø")
      // –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º input –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      setIsAdding(true)
      setIsEditing(false)
      setEditingIndex(null) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log("‚Üí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ isAdding = true")
    }
    console.log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ö–ù–û–ü–ö–ò ===")
  }

  const handleEditMode = () => {
    setIsEditing(!isEditing)
    setIsAdding(false)
    setEditingIndex(null) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
    setEditingRole("")
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
  const handleCancelAdd = () => {
    setNewRole("")
    setIsAdding(false)
  }

  const saveNewRole = () => {
    if (newRole.trim()) {
      const newTitle = newRole.trim()

      console.log("=== –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –†–û–õ–ò ===")
      console.log("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏:", newTitle)

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
      setNewRole("")
      setIsAdding(false)

      createRoleMutation.mutate({ title: newTitle })

      console.log("=== –°–û–ó–î–ê–ù–ò–ï –†–û–õ–ò –ó–ê–í–ï–†–®–ï–ù–û ===")
    }
  }

  const cancelAdd = () => {
    setNewRole("")
    setIsAdding(false)
  }

  const editRole = (index: number) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ä–æ–ª–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–ø—É—Ç —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    setEditingIndex(index)
    setEditingRole(roles[index].title)
    setIsAdding(false) // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω
  }

  const saveEditedRole = () => {
    if (editingRole.trim() && editingIndex !== null) {
      const roleToUpdate = roles[editingIndex]
      const newTitle = editingRole.trim()

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setEditingIndex(null)
      setEditingRole("")
      setIsAdding(false)
      setIsEditing(false)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
      updateRoleMutation.mutate({
        key: roleToUpdate.key,
        title: newTitle,
      })
    }
  }

  const cancelEdit = () => {
    setEditingIndex(null)
    setEditingRole("")
  }

  const handleDeleteClick = (index: number) => {
    setRoleToDelete(index)
    setIsDeleteModalOpen(true)
  }

  const handleDeleteModalClose = () => {
    setIsDeleteModalOpen(false)
    setRoleToDelete(null)
  }

  const confirmDelete = () => {
    if (roleToDelete === null) return

    const index = roleToDelete
    const roleToDeleteData = roles[index]

    console.log("=== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –í–ê–ö–ê–ù–°–ò–ò ===")
    console.log("–ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–π —Ä–æ–ª–∏:", index)
    console.log("–î–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", roleToDeleteData)
    console.log("Key –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", roleToDeleteData.key)

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ä–æ–ª—å
    if (editingIndex === index) {
      setEditingIndex(null)
      setEditingRole("")
      console.log("–°–±—Ä–æ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏")
    }

    // –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    setIsEditing(false)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    deleteRoleMutation.mutate({ key: roleToDeleteData.key })

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setIsDeleteModalOpen(false)
    setRoleToDelete(null)

    console.log("=== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
  }

  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      if (editingIndex !== null) {
        saveEditedRole()
      } else {
        saveNewRole()
      }
    } else if (e.key === "Escape") {
      if (editingIndex !== null) {
        cancelEdit()
      } else {
        cancelAdd()
      }
    }
  }

  return (
    <>
      <main>
        <section
          style={{ minHeight: "0", flexWrap: "wrap", maxWidth: "1280px" }}
        >
          <div className="formRow justify-flex-start">
            <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∫–µ—Ç—ã</h2>
          </div>
          <div className="center-card big">
            <div className="formRow">
              <h3 style={{ textAlign: "left" }}>–†–æ–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π</h3>
            </div>
            <div className="formRow" style={{ marginTop: "0" }}>
              <h4 style={{ textAlign: "left" }}>
                –†–æ–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∞–Ω–∫–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
              </h4>
            </div>
            <div
              className="formRow justify-flex-start"
              style={{ flexWrap: "wrap", gap: "1rem" }}
            >
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫—É */}
              {isLoadingRoles && (
                <div style={{ padding: "10px", color: "#666", width: "100%" }}>
                  –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π...
                </div>
              )}
              {rolesError && (
                <div
                  style={{ padding: "10px", color: "#e74c3c", width: "100%" }}
                >
                  {rolesError.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π"}
                  <button
                    onClick={() => refetch()}
                    style={{
                      marginLeft: "10px",
                      background: "none",
                      border: "none",
                      color: "#3498db",
                      cursor: "pointer",
                      textDecoration: "underline",
                    }}
                  >
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                  </button>
                </div>
              )}

              {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ API */}
              {!isLoadingRoles &&
                !rolesError &&
                roles.map((role, index) => (
                  <div
                    key={index}
                    className="roleItem"
                    data-key={role.key}
                    style={{
                      display: "flex",
                      alignItems: "center",
                      gap: "8px",
                    }}
                  >
                    <span>{role.title}</span>
                    {isEditing && (
                      <>
                        <button
                          onClick={() => editRole(index)}
                          style={{
                            background: "none",
                            border: "none",
                            cursor: "pointer",
                            padding: "2px",
                            display: "flex",
                            alignItems: "center",
                          }}
                        >
                          <Image
                            src="/images/icons/edit.svg"
                            alt="Edit"
                            width={16}
                            height={16}
                          />
                        </button>

                        <button
                          onClick={() => handleDeleteClick(index)}
                          style={{
                            background: "none",
                            border: "none",
                            cursor: "pointer",
                            padding: "2px",
                            display: "flex",
                            alignItems: "center",
                            color: "#dc3545",
                          }}
                        >
                          <Image
                            src="/images/icons/delete.svg"
                            alt="Delete"
                            width={16}
                            height={16}
                          />
                        </button>
                      </>
                    )}
                  </div>
                ))}

              {/* –ò–Ω–ø—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏ */}
              {isAdding && (
                <div className="input-container" style={{ minWidth: "200px" }}>
                  <label htmlFor="newRole" className="formLabel">
                    –ù–æ–≤–∞—è —Ä–æ–ª—å
                  </label>
                  <input
                    style={{ width: "100%" }}
                    type="text"
                    name="newRole"
                    id="newRole"
                    className="formInput"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"
                    value={newRole}
                    onChange={(e) => setNewRole(e.target.value)}
                    onKeyDown={handleKeyPress}
                    autoFocus
                  />
                </div>
              )}

              {/* –ò–Ω–ø—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ */}
              {editingIndex !== null && (
                <div className="input-container" style={{ minWidth: "200px" }}>
                  <label htmlFor="editRole" className="formLabel">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
                  </label>
                  <input
                    style={{ width: "100%" }}
                    type="text"
                    name="editRole"
                    id="editRole"
                    className="formInput"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"
                    value={editingRole}
                    onChange={(e) => setEditingRole(e.target.value)}
                    onKeyDown={handleKeyPress}
                    autoFocus
                  />
                </div>
              )}
            </div>
            <div
              className="formRow justify-flex-start"
              style={{ marginTop: "0" }}
            >
              <button
                className="formBtn small btn-active"
                onClick={handleAddRole}
                disabled={isLoadingRoles}
              >
                {editingIndex !== null
                  ? "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
                  : isAdding
                    ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å"
                    : "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å"}
              </button>

              {/* –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ */}
              {isAdding ? (
                // –ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
                <button
                  className="formBtn small btn-inactive"
                  onClick={handleCancelAdd}
                >
                  –û—Ç–º–µ–Ω–∏—Ç—å
                </button>
              ) : (
                // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                <button
                  className={`formBtn small ${
                    isEditing ? "btn-active" : "btn-inactive"
                  }`}
                  disabled={editingIndex !== null || isLoadingRoles}
                  onClick={handleEditMode}
                >
                  {isEditing ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"}
                </button>
              )}
            </div>
          </div>
          <AccessTable />
        </section>
      </main>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <ConfirmationModal
        isOpen={isDeleteModalOpen}
        onClose={handleDeleteModalClose}
        onConfirm={confirmDelete}
        header="–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é?"
        title={
          roleToDelete !== null
            ? `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å "${roles[roleToDelete]?.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.`
            : ""
        }
      />
    </>
  )
}

export default CandidatesSettings
