"use client";

import React, { useState, useEffect, useRef, FC } from 'react';
import { useRouter } from 'next/navigation';
import "../candidatesSecurityBlock/candidateRegForm.css";


interface Notification {
    id?: { $oid: string };
    title: string;
    created_at: string;
}

interface NotificationResponse {
    response: boolean;
    attributes?: Notification[];
}

interface Role {
    id: string;
    key: string;
    title: string;
}

interface VacancyResponse {
    response: boolean;
    attributes?: Role[];
    error?: string;
}

interface HeaderProps {
    onCityChange?: (city: string) => void;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Header
const Header: FC<HeaderProps> = ({ onCityChange }) => {
    const [showNotifications, setShowNotifications] = useState<boolean>(false);
    const [notifications, setNotifications] = useState<Notification[]>([]);
    const [loading, setLoading] = useState<boolean>(false);
    const [selectedCity, setSelectedCity] = useState<string>('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫');
    const [showCityDropdown, setShowCityDropdown] = useState<boolean>(false);
    const notificationButtonRef = useRef<HTMLButtonElement | null>(null);
    const cityDropdownRef = useRef<HTMLDivElement | null>(null);

    // –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    const cities: string[] = [
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    const formatNotificationDate = (dateString: string): string => {
        const notificationDate = new Date(dateString);
        const now = new Date();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
        const isToday = notificationDate.toDateString() === now.toDateString();
        
        const hours = notificationDate.getHours().toString().padStart(2, '0');
        const minutes = notificationDate.getMinutes().toString().padStart(2, '0');
        const time = `${hours}:${minutes}`;
        
        if (isToday) {
            return time;
        } else {
            const day = notificationDate.getDate().toString().padStart(2, '0');
            const month = (notificationDate.getMonth() + 1).toString().padStart(2, '0');
            return `${time} ${day}.${month}`;
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    const handleCitySelect = (city: string): void => {
        setSelectedCity(city);
        setShowCityDropdown(false);
        if (onCityChange) {
            onCityChange(city);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    const toggleCityDropdown = (): void => {
        setShowCityDropdown(!showCityDropdown);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ dropdown –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent): void => {
            if (cityDropdownRef.current && !cityDropdownRef.current.contains(event.target as Node)) {
                setShowCityDropdown(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    useEffect(() => {
        const fetchNotifications = async (): Promise<void> => {
            setLoading(true);
            const url = '/api/v1/notification/new-candidates';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ –ø—Ä–æ–µ–∫—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            const getAccessToken = (): string | null => {
                const cookies = document.cookie.split(';');
                for (let cookie of cookies) {
                    const [name, value] = cookie.trim().split('=');
                    if (name === 'access_token') {
                        return value;
                    }
                }
                return null;
            };

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞ (—Ç–∞–∫–∂–µ –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
            const getCsrfToken = (): string => {
                const metaTag = document.querySelector('meta[name="csrf-token"]');
                if (metaTag) {
                    return metaTag.getAttribute('content') || '';
                }

                const cookies = document.cookie.split(';');
                for (let cookie of cookies) {
                    const [name, value] = cookie.trim().split('=');
                    if (name === 'XSRF-TOKEN') {
                        return decodeURIComponent(value);
                    }
                }

                return 'Zva2RlvTSh5wTQogjJMfE8v5ObQoOSIcL40Xwc5d';
            };

            const token = getAccessToken();
            const csrfToken = getCsrfToken();
            
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞:', url);
            console.log('üåê –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω:', window.location.origin);
            console.log('üìç –ü–æ–ª–Ω—ã–π URL:', window.location.origin + url);
            console.log('üîë Access Token –Ω–∞–π–¥–µ–Ω:', token ? '–î–∞' : '–ù–µ—Ç');
            console.log('üîë Access Token (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', token ? token.substring(0, 20) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            console.log('üõ°Ô∏è CSRF Token –Ω–∞–π–¥–µ–Ω:', csrfToken ? '–î–∞' : '–ù–µ—Ç');

            try {
                const headers: Record<string, string> = {
                    'accept': 'application/json',
                    'Content-Type': 'application/json'
                };

                // –î–æ–±–∞–≤–ª—è–µ–º Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω
                if (csrfToken) {
                    headers['X-CSRF-TOKEN'] = csrfToken;
                }

                console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', headers);

                const response = await fetch(url, {
                    method: 'GET',
                    headers: headers
                });
                
                console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
                console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));
                console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', response.ok);

                if (response.ok) {
                    // –ü–æ–ª—É—á–∞–µ–º JSON –æ—Ç–≤–µ—Ç
                    const data: NotificationResponse = await response.json();
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω—ã:', data);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    if (data.response && data.attributes) {
                        setNotifications(data.attributes);
                    }
                } else {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                    const errorText = await response.text();
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
                        status: response.status,
                        statusText: response.statusText,
                        errorText: errorText.substring(0, 200)
                    });
                }

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
                console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                    name: error instanceof Error ? error.name : 'Unknown',
                    message: error instanceof Error ? error.message : 'Unknown error',
                    stack: error instanceof Error ? error.stack : undefined
                });
            } finally {
                setLoading(false);
            }
        };

        fetchNotifications();
    }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    const handleLogout = (): void => {
        document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        window.location.reload();
    };

    const toggleNotifications = (): void => {
        setShowNotifications(!showNotifications);
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∏–∫–æ–Ω–∫—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    const getNotificationIcon = (): string => {
        return notifications.length > 0 ? '/img/ringActive.webp' : '/img/ring.webp';
    };

    const getNotificationAlt = (): string => {
        return notifications.length > 0 ? '–ï—Å—Ç—å –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç';
    };

    return (
        <header>
            <div className="formRow justify-space-between w-80">
                <div style={{display: 'flex', alignItems: 'center'}}>
                    <img id="nonTextImg" src="/img/ logo –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.webp" alt="–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –ü–æ–∏—Å–∫ –ú–µ—Ç—Ä–æ–≤" />
                    <div style={{position: 'relative'}} ref={cityDropdownRef}>
                        <h5 id="city">
                            –ì–æ—Ä–æ–¥: 
                            <span 
                                id="selectCity" 
                                onClick={toggleCityDropdown}
                                style={{cursor: 'pointer'}}
                            >
                                {selectedCity}
                            </span>
                            <svg 
                                width="12" 
                                height="12" 
                                viewBox="0 0 24 24" 
                                fill="none" 
                                stroke="currentColor" 
                                strokeWidth="2"
                                style={{
                                    transform: showCityDropdown ? 'rotate(180deg)' : 'rotate(0deg)',
                                    transition: 'transform 0.2s ease'
                                }}
                            >
                                <path d="M6 9L12 15L18 9" />
                            </svg>
                        </h5>
                        
                        {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ */}
                        {showCityDropdown && (
                            <div className="city-dropdown">
                                {cities.map((city) => (
                                    <div 
                                        key={city}
                                        className={`city-option ${city === selectedCity ? 'selected' : ''}`}
                                        onClick={() => handleCitySelect(city)}
                                    >
                                        {city}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="w-80" style={{display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '30px'}}>
                    <a href="/profile-candidates/security/">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</a>
                    <a href="/profile-candidates/security/settings" className="active">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
                </div>
                <div style={{display: 'flex', justifyContent: 'space-between', minWidth: '250px', position: 'relative'}}>
                    {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –±–ª–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                    <div style={{position: 'relative'}}>
                        <button
                            id="notifBtn"
                            ref={notificationButtonRef}
                            onClick={toggleNotifications}
                            style={{position: 'relative'}}
                        >
                            <img 
                                src={getNotificationIcon()} 
                                alt={getNotificationAlt()} 
                            />
                        </button>
                        {/* –ë–ª–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                        {showNotifications && (
                            <div className="notifications-container">
                                <div className="header">
                                    <h1 className="notification-header">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
                                </div>
                                <div className="divider"></div>
                                <div className="notifications-list">
                                    {loading ? (
                                        <div className="notification-item">
                                            <div className="notification-content">
                                                <span className="notification-text">–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</span>
                                            </div>
                                        </div>
                                    ) : notifications.length > 0 ? (
                                        notifications.map((notification, index) => (
                                            <div key={notification.id?.$oid || index} className="notification-item">
                                                <div className="notification-dot"></div>
                                                <div className="notification-content">
                                                    <span className="notification-text">{notification.title}</span>
                                                    <span className="notification-time">
                                                        {formatNotificationDate(notification.created_at)}
                                                    </span>
                                                </div>
                                            </div>
                                        ))
                                    ) : (
                                        <div className="notification-item">
                                            <div className="notification-content">
                                                <span className="notification-text">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç</span>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                    <button id="exitBtn" onClick={handleLogout}>
                        –í—ã–π—Ç–∏ –∏–∑ –õ–ö <img src="/img/arowRight.webp" alt="–°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–ø—Ä–∞–≤–æ" />
                    </button>
                </div>
            </div>
        </header>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
interface DeleteConfirmationModalProps {
    isOpen: boolean;
    onClose: () => void;
    onConfirm: () => void;
    roleName: string;
}

const DeleteConfirmationModal: FC<DeleteConfirmationModalProps> = ({ isOpen, onClose, onConfirm, roleName }) => {
    const [isVisible, setIsVisible] = useState<boolean>(false);

    useEffect(() => {
        if (isOpen) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => setIsVisible(true), 10);
        } else {
            setIsVisible(false);
        }
    }, [isOpen]);

    const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>): void => {
        if (e.target === e.currentTarget) {
            onClose();
        }
    };

    const handleConfirm = (): void => {
        onConfirm();
        onClose();
    };

    if (!isOpen) return null;

    return (
        <>
            <style jsx>{`
                .modal-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background-color: rgba(0, 0, 0, 0.5);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 1000;
                    opacity: 0;
                    transition: opacity 0.3s ease;
                }
                
                .modal-overlay.show {
                    opacity: 1;
                }
                
                .modal-content {
                    transform: scale(0.8) translateY(20px);
                    transition: transform 0.3s ease;
                }
                
                .modal-overlay.show .modal-content {
                    transform: scale(1) translateY(0);
                }
            `}</style>
            <div 
                className={`modal-overlay ${isVisible ? 'show' : ''}`}
                onClick={handleOverlayClick}
            >
                <main className="modal-content">
                    <section>
                        <div className="center-card" style={{maxHeight: '263px'}}>
                            <h1>–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</h1>
                            <p>–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ –∞–Ω–∫–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?</p>
                            <div className="formRow justify-space-between">
                                <button 
                                    style={{maxWidth: '150px'}} 
                                    className="formBtn btn-active" 
                                    onClick={onClose}
                                >
                                    –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å
                                </button>
                                <button 
                                    style={{maxWidth: '150px'}} 
                                    className="formBtn btn-inactive" 
                                    onClick={handleConfirm}
                                >
                                    –î–∞, —É–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </section>
                </main>
            </div>
        </>
    );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CandidatesSettings
const CandidatesSettings: FC = () => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    const [roles, setRoles] = useState<Role[]>([]);
    const [isLoadingRoles, setIsLoadingRoles] = useState<boolean>(true);
    const [rolesError, setRolesError] = useState<string>('');

    const [isAdding, setIsAdding] = useState<boolean>(false);
    const [isEditing, setIsEditing] = useState<boolean>(false);
    const [newRole, setNewRole] = useState<string>('');
    const [editingIndex, setEditingIndex] = useState<number | null>(null);
    const [editingRole, setEditingRole] = useState<string>('');

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);
    const [roleToDelete, setRoleToDelete] = useState<number | null>(null);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
    const getAccessTokenFromCookie = (): string | null => {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [name, value] = cookie.trim().split('=');
            if (name === 'access_token') {
                return value;
            }
        }
        return null;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ API
    const loadRoles = async (): Promise<void> => {
        try {
            setIsLoadingRoles(true);
            setRolesError('');

            const accessToken = getAccessTokenFromCookie();

            if (!accessToken) {
                setRolesError('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const response = await fetch('/api/v1/vacancy/', {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${accessToken}`
                }
            });

            const data: VacancyResponse = await response.json();

            if (data.response && data.attributes) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ä–æ–ª–µ–π –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º key
                const rolesFromApi = data.attributes.map(vacancy => ({
                    id: vacancy.id,
                    key: vacancy.key,
                    title: vacancy.title
                }));
                setRoles(rolesFromApi);
                console.log('–†–æ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', rolesFromApi);
            } else {
                setRolesError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π:', error);
            setRolesError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π');
        } finally {
            setIsLoadingRoles(false);
        }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        loadRoles();
    }, []);

    const handleAddRole = (): void => {
        console.log('=== –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–ò–¢–¨ –†–û–õ–¨ ===');
        console.log('–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
        console.log('- editingIndex:', editingIndex);
        console.log('- isAdding:', isAdding);
        console.log('- newRole:', newRole);
        console.log('- editingRole:', editingRole);

        if (editingIndex !== null) {
            console.log('‚Üí –†–µ–∂–∏–º: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø');
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–æ–ª—å
            saveEditedRole();
        } else if (isAdding) {
            console.log('‚Üí –†–µ–∂–∏–º: –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–í–û–ô –†–û–õ–ò');
            console.log('‚Üí –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω–ø—É—Ç–µ:', `"${newRole}"`);
            console.log('‚Üí –ü–æ—Å–ª–µ trim():', `"${newRole.trim()}"`);
            console.log('‚Üí –£—Å–ª–æ–≤–∏–µ newRole.trim():', newRole.trim() ? 'TRUE' : 'FALSE');
            // –í—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
            if (newRole.trim()) {
                console.log('‚Üí –í–´–ó–´–í–ê–ï–ú saveNewRole()');
                saveNewRole();
            } else {
                console.log('‚Üí –ù–ï –≤—ã–∑—ã–≤–∞–µ–º saveNewRole() - –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
            }
        } else {
            console.log('‚Üí –†–µ–∂–∏–º: –ü–û–ö–ê–ó–ê–¢–¨ –ò–ù–ü–£–¢ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø');
            // –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º input –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            setIsAdding(true);
            setIsEditing(false);
            setEditingIndex(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            console.log('‚Üí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ isAdding = true');
        }
        console.log('=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ö–ù–û–ü–ö–ò ===');
    };

    const handleEditMode = (): void => {
        setIsEditing(!isEditing);
        setIsAdding(false);
        setEditingIndex(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
        setEditingRole('');
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
    const handleCancelAdd = (): void => {
        setNewRole('');
        setIsAdding(false);
    };

    const saveNewRole = async (): Promise<void> => {
        if (newRole.trim()) {
            const newTitle = newRole.trim();

            console.log('=== –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –†–û–õ–ò ===');
            console.log('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏:', newTitle);

            // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ UI
            const newRoleObj: Role = {
                id: `temp_${Date.now()}`,
                key: `temp_key_${Date.now()}`,
                title: newTitle
            };
            setRoles([...roles, newRoleObj]);
            setNewRole('');
            setIsAdding(false);

            console.log('–ù–æ–≤–∞—è —Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ UI:', newRoleObj);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
            const requestData = {
                title: newTitle
            };

            console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', requestData);
            console.log('JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(requestData, null, 2));

            try {
                const accessToken = getAccessTokenFromCookie();
                console.log('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', accessToken ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω');

                if (accessToken) {
                    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –∫ /api/v1/vacancy/store');
                    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${accessToken.substring(0, 10)}...`
                    });

                    const response = await fetch('/api/v1/vacancy/store', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${accessToken}`
                        },
                        body: JSON.stringify(requestData)
                    });

                    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', response.status);
                    console.log('–°—Ç–∞—Ç—É—Å OK –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', response.ok);
                    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', Object.fromEntries(response.headers.entries()));

                    const data = await response.json();
                    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', data);

                    if (response.ok && data.response) {
                        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏:', data);

                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å
                        if (data.attributes) {
                            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
                            const updatedRoles = [...roles];
                            const lastIndex = updatedRoles.length - 1;
                            updatedRoles[lastIndex] = {
                                id: data.attributes.id,
                                key: data.attributes.key,
                                title: data.attributes.title
                            };
                            setRoles(updatedRoles);
                            console.log('–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', updatedRoles[lastIndex]);
                        }
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                        console.error('Response.ok:', response.ok);
                        console.error('Data.response:', data.response);
                        console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', data);
                    }
                } else {
                    console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏');
                }
            } catch (error) {
                console.error('‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏:', error);
                if (error instanceof Error) {
                    console.error('–¢–∏–ø –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', error.constructor.name);
                    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', error.message);
                    console.error('Stack trace –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', error.stack);
                }
            }

            console.log('=== –°–û–ó–î–ê–ù–ò–ï –†–û–õ–ò –ó–ê–í–ï–†–®–ï–ù–û ===');
        }
    };

    const cancelAdd = (): void => {
        setNewRole('');
        setIsAdding(false);
    };

    const editRole = (index: number): void => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ä–æ–ª–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–ø—É—Ç —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        setEditingIndex(index);
        setEditingRole(roles[index].title);
        setIsAdding(false); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω
    };

    const saveEditedRole = async (): Promise<void> => {
        if (editingRole.trim() && editingIndex !== null) {
            const roleToUpdate = roles[editingIndex];
            const newTitle = editingRole.trim();

            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI: –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ø—É—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º roleItem
            const updatedRoles = [...roles];
            updatedRoles[editingIndex] = {
                ...updatedRoles[editingIndex],
                title: newTitle
            };
            setRoles(updatedRoles);
            setEditingIndex(null);
            setEditingRole('');
            // –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setIsEditing(false);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ UI)
            const requestData = {
                key: roleToUpdate.key,
                title: newTitle
            };

            try {
                const accessToken = getAccessTokenFromCookie();

                if (accessToken) {
                    fetch('/api/v1/vacancy/update', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${accessToken}`
                        },
                        body: JSON.stringify(requestData)
                    });
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - UI —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω
            }
        }
    };

    const cancelEdit = (): void => {
        setEditingIndex(null);
        setEditingRole('');
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const handleDeleteClick = (index: number): void => {
        setRoleToDelete(index);
        setIsDeleteModalOpen(true);
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const handleDeleteModalClose = (): void => {
        setIsDeleteModalOpen(false);
        setRoleToDelete(null);
    };

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–î–∞, —É–¥–∞–ª–∏—Ç—å"
    const confirmDelete = async (): Promise<void> => {
        if (roleToDelete === null) return;

        const index = roleToDelete;
        const roleToDeleteData = roles[index];

        console.log('=== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –í–ê–ö–ê–ù–°–ò–ò ===');
        console.log('–ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–π —Ä–æ–ª–∏:', index);
        console.log('–î–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', roleToDeleteData);
        console.log('Key –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', roleToDeleteData.key);

        // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏–∑ UI
        const updatedRoles = roles.filter((_, i) => i !== index);
        setRoles(updatedRoles);

        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ä–æ–ª—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (editingIndex === index) {
            setEditingIndex(null);
            setEditingRole('');
            console.log('–°–±—Ä–æ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏');
        }

        // –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        setIsEditing(false);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try {
            const accessToken = getAccessTokenFromCookie();
            console.log('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', accessToken ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω');

            if (accessToken) {
                const deleteUrl = `/api/v1/vacancy/destroy?key=${roleToDeleteData.key}`;
                console.log('URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', deleteUrl);
                console.log('–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: DELETE');
                console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${accessToken.substring(0, 10)}...`
                });

                const response = await fetch(deleteUrl, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${accessToken}`
                    }
                });

                console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', response.status);
                console.log('–°—Ç–∞—Ç—É—Å OK –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', response.ok);
                console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', Object.fromEntries(response.headers.entries()));

                const data = await response.json();
                console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', data);

                if (response.ok) {
                    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                    console.error('Response.ok:', response.ok);
                    console.error('Data:', data);
                }
            } else {
                console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
            if (error instanceof Error) {
                console.error('–¢–∏–ø –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error.constructor.name);
                console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error.message);
                console.error('Stack trace –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error.stack);
            }
        }

        console.log('=== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
    };

    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {
        if (e.key === 'Enter') {
            if (editingIndex !== null) {
                saveEditedRole();
            } else {
                saveNewRole();
            }
        } else if (e.key === 'Escape') {
            if (editingIndex !== null) {
                cancelEdit();
            } else {
                cancelAdd();
            }
        }
    };

    return (
        <>
            <main>
                <section style={{minHeight: '0', flexWrap: 'wrap'}}>
                    <div className="formRow justify-flex-start w-60">
                        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∫–µ—Ç—ã</h2>
                    </div>
                    <div className="center-card big">
                        <div className="formRow">
                            <h3 style={{textAlign: 'left'}}>–†–æ–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π</h3>
                        </div>
                        <div className="formRow" style={{marginTop: '0'}}>
                            <h4 style={{textAlign: 'left'}}>–†–æ–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∞–Ω–∫–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</h4>
                        </div>
                        <div className="formRow justify-flex-start" style={{flexWrap: 'wrap', gap: '1rem'}}>
                            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫—É */}
                            {isLoadingRoles && (
                                <div style={{padding: '10px', color: '#666', width: '100%'}}>
                                    –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π...
                                </div>
                            )}
                            {rolesError && (
                                <div style={{padding: '10px', color: '#e74c3c', width: '100%'}}>
                                    {rolesError}
                                    <button
                                        onClick={loadRoles}
                                        style={{
                                            marginLeft: '10px',
                                            background: 'none',
                                            border: 'none',
                                            color: '#3498db',
                                            cursor: 'pointer',
                                            textDecoration: 'underline'
                                        }}
                                    >
                                        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                                    </button>
                                </div>
                            )}

                            {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ API */}
                            {!isLoadingRoles && !rolesError && roles.map((role, index) => (
                                <div key={index} className="roleItem" data-key={role.key} style={{display: 'flex', alignItems: 'center', gap: '8px'}}>
                                    <span>{role.title}</span>
                                    {isEditing && (
                                        <>
                                            <button
                                                onClick={() => editRole(index)}
                                                style={{
                                                    background: 'none',
                                                    border: 'none',
                                                    cursor: 'pointer',
                                                    padding: '2px',
                                                    display: 'flex',
                                                    alignItems: 'center'
                                                }}
                                            >
                                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
                                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
                                                </svg>
                                            </button>
                                            <button
                                                onClick={() => handleDeleteClick(index)}
                                                style={{
                                                    background: 'none',
                                                    border: 'none',
                                                    cursor: 'pointer',
                                                    padding: '2px',
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    color: '#dc3545'
                                                }}
                                            >
                                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                                                    <line x1="18" y1="6" x2="6" y2="18" />
                                                    <line x1="6" y1="6" x2="18" y2="18" />
                                                </svg>
                                            </button>
                                        </>
                                    )}
                                </div>
                            ))}

                            {/* –ò–Ω–ø—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏ */}
                            {isAdding && (
                                <div className="input-container" style={{minWidth: '200px'}}>
                                    <label htmlFor="newRole" className="formLabel">–ù–æ–≤–∞—è —Ä–æ–ª—å</label>
                                    <input
                                        style={{width: '100%'}}
                                        type="text"
                                        name="newRole"
                                        id="newRole"
                                        className="formInput"
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"
                                        value={newRole}
                                        onChange={(e) => setNewRole(e.target.value)}
                                        onKeyDown={handleKeyPress}
                                        autoFocus
                                    />
                                </div>
                            )}

                            {/* –ò–Ω–ø—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ */}
                            {editingIndex !== null && (
                                <div className="input-container" style={{minWidth: '200px'}}>
                                    <label htmlFor="editRole" className="formLabel">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</label>
                                    <input
                                        style={{width: '100%'}}
                                        type="text"
                                        name="editRole"
                                        id="editRole"
                                        className="formInput"
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"
                                        value={editingRole}
                                        onChange={(e) => setEditingRole(e.target.value)}
                                        onKeyDown={handleKeyPress}
                                        autoFocus
                                    />
                                </div>
                            )}
                        </div>
                        <div className="formRow justify-flex-start" style={{marginTop: '0'}}>
                            <button
                                className={`formBtn small btn-active`}
                                onClick={handleAddRole}
                                disabled={isLoadingRoles}
                            >
                                {editingIndex !== null ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' : (isAdding ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å')}
                            </button>
                            
                            {/* –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ */}
                            {isAdding ? (
                                // –ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
                                <button
                                    className="formBtn small btn-inactive"
                                    onClick={handleCancelAdd}
                                >
                                    –û—Ç–º–µ–Ω–∏—Ç—å
                                </button>
                            ) : (
                                // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                <button
                                    className={`formBtn small ${isEditing ? 'btn-active' : 'btn-inactive'}`}
                                    disabled={editingIndex !== null || isLoadingRoles}
                                    onClick={handleEditMode}
                                >
                                    {isEditing ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                                </button>
                            )}
                        </div>
                    </div>
                </section>
            </main>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            <DeleteConfirmationModal
                isOpen={isDeleteModalOpen}
                onClose={handleDeleteModalClose}
                onConfirm={confirmDelete}
                roleName={roleToDelete !== null ? roles[roleToDelete]?.title : ''}
            />
        </>
    );
};

// –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const CandidatesSettingsApp: FC = () => {
    return (
        <>
            <style jsx>{`
                a {
                    text-decoration: none;
                    color: rgba(129, 129, 129, 1);
                }
                
                a:hover {
                    color: rgba(24, 24, 23, 1);
                }
            `}</style>
            <Header />
            <CandidatesSettings />
        </>
    );
};

export default CandidatesSettingsApp;