import { useEffect } from "react"

import { useAuthState } from "@/hooks/useAuthState"
import { useApiQuery } from "@/utils/hooks/use-api"

/**
 * –•—É–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
 */
export function useAuthenticatedApiQuery<T>(
  key: string[],
  url: string,
  options?: {
    enabled?: boolean
    staleTime?: number
    gcTime?: number
    retry?: number
    retryDelay?: number
    useMock?: boolean
    mockFn?: () => Promise<T>
    refetchOnMount?: boolean
    refetchOnWindowFocus?: boolean
    refetchOnReconnect?: boolean
    refetchInterval?: number
    refetchIntervalInBackground?: boolean
  }
) {
  const { token, isAuthenticated } = useAuthState()

  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    if (isAuthenticated && token) {
      console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", token)
    }
  }, [isAuthenticated, token])

  return useApiQuery<T>(key, url, {
    ...options,
    enabled: options?.enabled !== false && isAuthenticated && !!token,
  })
}
